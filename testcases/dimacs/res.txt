Results are collect using 'time ./regolic --dimacs filename'.
Usually we run 3 times and take the best results (from the 'real' line), 
sometimes, when the time is long (1 minute or more) we only run 1 or 2 times.
Output is sat/unsat.
---- means that test was not run for this version.
>time means that we timeout after time
We do not attempt to identify the warmup time of the JVM, so there is probably a
huge overhead due to this.

Naive only use the formula data strcture and naive map/substitute and recursion for backtracking

V1 is counter based with dedicaced data structure and adjacency list. No heuristics are used and
no long backtracking (conflict analysis).

V2 is more close to a real sat, with long backtracking, clause learning, restart and decision heuristic (VSIDS).
BCP is still two counter, and the conflict analysis is not done efficiently. We explicitly build
an implication graph, and we also do a preprocessing more costly than before (but also more correct in
the general case, which was not the case before). This probably explain why the results are mostly less
good, all the important mechanisms are there, but nothing is really implemented efficiently.
In particular clause learning adds new clauses and it is likely that the two-counter is then more and more
expensive. Still, some testcase improve drastically.

V3 uses two watched literal for BCP, the conflict analysis is a much more optimized impliementation and actually generates smaller clauses. It is the first UIP scheme.

benchmark         Naive   V1      V2      V3
uf20-0150.cnf     0.843   0.363   0.472   0.396
uf20-0155.cnf     0.870   0.359   0.390   0.388
uf50-0250.cnf     2.379   0.489   0.766   0.425
uf50-0350.cnf     1.582   0.481   1.313   0.452
uf75-012.cnf      5.570   0.969   3.995   0.614
uf75-018.cnf      5.816   0.541   1.172   0.453
uf100-0104.cnf    ----    7.533   1.514   0.480
uf100-0232.cnf    ----    0.810   0.958   0.467
uf100-0444.cnf    ----    10.84   12.79   0.852
uf100-0777.cnf    ----    0.324   1.969   0.492
uf100-0801.cnf    ----    0.330   1.133   0.456
uf125-032.cnf     ----    >4m14   12.24   0.669
uf125-034.cnf     ----    22.49   1.420   0.486
uf125-063.cnf     ----    3.246   >5m     0.937
uf125-077.cnf     ----    1.675   46.28   0.903
uf200-012.cnf     ----    ----    ----    1m7
uf200-018.cnf     ----    ----    ----    3.749
uf200-066.cnf     ----    ----    ----    2m52
uf200-081.cnf     ----    ----    ----    1m6
bmc-ibm-1.cnf     ----    ----    ----    16.10


uuf50-0321.cnf    1.931   0.720   1.902   0.488
uuf50-0327.cnf    1.601   0.616   1.564   0.483
uuf100-0123.cnf   2m37    9.876   1m13    0.941
uuf100-0129.cnf   47.00   10.38   1m39    0.982
uuf100-0334.cnf   ----    25.53   22.86   0.779
uuf100-0722.cnf   ----    21.12   2m8     0.894
uuf125-012.cnf    ----    1m46    >2m43   1.754
uuf125-055.cnf    ----    3m54    >3m4    2.374
uuf125-074.cnf    ----    1m9     >6m     1.664
